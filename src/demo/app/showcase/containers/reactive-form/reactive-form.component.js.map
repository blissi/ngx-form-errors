{"version":3,"sources":["../../../../../../../src/demo/app/showcase/containers/reactive-form/reactive-form.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAA,EAAU,MAAO,eAAA,CAAgB;AAC1C,OAAO,EAAE,WAAA,EAAwB,UAAA,EAAW,MAAO,gBAAA,CAAiB;AAEpE,OAAO,KAAK,UAAA,MAAgB,kBAAA,CAAmB;AAC/C,OAAO,EAAE,IAAA,EAAM,SAAA,EAAU,MAAO,YAAA,CAAa;AAM7C;IAME,+BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,UAAK,GAAS,IAAI,IAAI,EAAE,CAAC;QAEhB,cAAS,GAAG,SAAS,CAAC;QAG7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACrC,IAAI,EAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;YACxD,QAAQ,EAAU,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;YAC5F,eAAe,EAAG,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,CAAC,QAAQ,CAAC;YACnE,KAAK,EAAa,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;YACtF,IAAI,EAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;SACzD,EAAE;YACD,SAAS,EAAE,UAAU,CAAC,mBAAmB,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,EACvE,yBAAyB,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAjBU,qBAAqB;QAJjC,SAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,WAAW,EAAE,8BAA8B;SAC5C,CAAC;yCAOiC,WAAW;OANjC,qBAAqB,CAmBjC;IAAD,4BAAC;CAnBD,AAmBC,IAAA;SAnBY,qBAAqB","file":"reactive-form.component.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport * as validators from '../../validators';\nimport { User, UserRoles } from '../../user';\n\n@Component({\n  selector: 'reactive-driven-form',\n  templateUrl: 'reactive-form.component.html'\n})\nexport class ReactiveFormComponent {\n  userForm: FormGroup;\n  model: User = new User();\n\n  readonly userRoles = UserRoles;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.userForm = this.formBuilder.group({\n      name:             [this.model.name, Validators.required],\n      password:         [this.model.password, [Validators.required, validators.passwordValidator]],\n      confirmPassword:  [this.model.confirmPassword, Validators.required],\n      email:            [this.model.email, [Validators.required, validators.emailValidator]],\n      role:             [this.model.role, Validators.required]\n    }, {\n      validator: validators.fieldMatchValidator(['password', 'confirmPassword'],\n        'Password does not match')\n    });\n  }\n\n}\n"]}