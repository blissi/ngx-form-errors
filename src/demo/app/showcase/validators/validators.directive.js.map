{"version":3,"sources":["../../../../../../src/demo/app/showcase/validators/validators.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,KAAA,EAAM,MAAO,eAAA,CAAgB;AAC7D,OAAO,EAAE,aAAA,EAA+B,MAAO,gBAAA,CAAiB;AAEhE,OAAO,EAAE,cAAA,EAAgB,iBAAA,EAAmB,mBAAA,EAAoB,MAAO,cAAA,CAAe;AAQtF;IAAA;IAAuC,CAAC;IAA3B,uBAAuB;QANnC,SAAS,CAAC;YACT,QAAQ,EAAE,0BAA0B;YACpC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE;aAClE;SACF,CAAC;OACW,uBAAuB,CAAI;IAAD,8BAAC;CAAxC,AAAwC,IAAA;SAA3B,uBAAuB;AAQpC;IAAA;IAA0C,CAAC;IAA9B,0BAA0B;QANtC,SAAS,CAAC;YACT,QAAQ,EAAE,6BAA6B;YACvC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE;aACrE;SACF,CAAC;OACW,0BAA0B,CAAI;IAAD,iCAAC;CAA3C,AAA2C,IAAA;SAA9B,0BAA0B;AAavC;IAAA;IAkBA,CAAC;qCAlBY,4BAA4B;IAI9B,sBAAI,4DAAkB;aAAtB,UAAuB,MAAyD;YACvF,EAAE,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvE,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC;YAC1E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAAA;IAED,+CAAQ,GAAR,UAAS,CAAkB;QACzB,MAAM,CAAC,IAAI,CAAC,SAAS;cACjB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;cACjB,IAAI,CACP;IACH,CAAC;IAbQ;QAAR,KAAK,EAAE;;;0EAMP;IAVU,4BAA4B;QAXxC,SAAS,CAAC;YACT,QAAQ,EAAE,8DAA8D;YACxE,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,aAAa;oBACtB,8BAA8B;oBAC9B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,8BAA4B,EAA5B,CAA4B,CAAC;oBAC3D,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;OACW,4BAA4B,CAkBxC;IAAD,mCAAC;;CAlBD,AAkBC,IAAA;SAlBY,4BAA4B","file":"validators.directive.js","sourceRoot":"","sourcesContent":["import { Directive, forwardRef, Input } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl } from '@angular/forms';\n\nimport { emailValidator, passwordValidator, fieldMatchValidator } from './validators';\n\n@Directive({\n  selector: '[validateEmail][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useValue: emailValidator, multi: true }\n  ]\n})\nexport class EmailValidatorDirective { }\n\n@Directive({\n  selector: '[validatePassword][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useValue: passwordValidator, multi: true }\n  ]\n})\nexport class PasswordValidatorDirective { }\n\n@Directive({\n  selector: '[validateFieldMatch][ngModelGroup], form[validateFieldMatch]',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      /* tslint:disable-next-line */\n      useExisting: forwardRef(() => FieldMatchValidatorDirective),\n      multi: true\n    }\n  ]\n})\nexport class FieldMatchValidatorDirective {\n\n  validator: Function;\n\n  @Input() set validateFieldMatch(config: {fields: string[], msg: string, negate?: boolean}) {\n    if (config && Array.isArray(config.fields) && config.fields.length > 1) {\n      this.validator = fieldMatchValidator(config.fields, config.msg || true);\n    } else {\n      this.validator = undefined;\n    }\n  }\n\n  validate(c: AbstractControl) {\n    return this.validator\n      ? this.validator(c)\n      : null\n    ;\n  }\n}\n"]}