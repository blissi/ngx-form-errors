{"version":3,"sources":["../../../../../../src/demo/app/showcase/validators/validators.ts"],"names":[],"mappings":"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","file":"validators.js","sourceRoot":"","sourcesContent":["import { AbstractControl, ValidatorFn } from '@angular/forms';\n\n/* tslint:disable */\nconst re = {\n  creditCard: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n  email: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,\n  password: /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/\n};\n/* tslint:enable */\n\nexport function creditCardValidator(control: AbstractControl) {\n  // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n  if (control.value && control.value.match(re.creditCard)) {\n    return null;\n  } else {\n    return { invalidCreditCard: true };\n  }\n}\n\nexport function emailValidator(control: AbstractControl) {\n  // RFC 2822 compliant regex\n  if (control.value && control.value.match(re.email)) {\n    return null;\n  } else {\n    return { invalidEmailAddress: true };\n  }\n}\n\nexport function passwordValidator(control: AbstractControl) {\n  // {6,100}           - Assert password is between 6 and 100 characters\n  // (?=.*[0-9])       - Assert a string has at least one number\n  if (control.value && control.value.match(re.password)) {\n    return null;\n  } else {\n    return { invalidPassword: true };\n  }\n}\n\nexport function fieldMatchValidator(formControlNames: string[],\n                                    message: string | true,\n                                    negative: boolean = false): ValidatorFn {\n  if (formControlNames.length < 2) {\n    throw new Error('Field match validator requires at least 2 fields');\n  }\n\n  negative = !!negative;\n\n  return (control: AbstractControl) => {\n    const primaryControl = control.get(formControlNames[0]);\n    const theTruth = primaryControl && primaryControl.value;\n\n    for (let i = 1, len = formControlNames.length; i < len; i++) {\n      const child = control.get(formControlNames[i]);\n      if (child) {\n        const notMatched = theTruth !== child.value;\n        const errors = child.errors || {};\n\n        if ((notMatched && !negative) || (!notMatched && negative)) {\n          errors['fieldMatchValidator'] = message;\n        } else {\n          delete errors['fieldMatchValidator'];\n        }\n\n        child.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n    return {};\n  }\n}"]}