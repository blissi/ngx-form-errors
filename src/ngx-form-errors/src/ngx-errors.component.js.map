{"version":3,"sources":["../../../../src/ngx-form-errors/src/ngx-errors.component.ts"],"names":[],"mappings":"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","file":"ngx-errors.component.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewContainerRef\n} from '@angular/core';\nimport { AbstractControl, ControlContainer } from '@angular/forms';\nimport { filter } from 'rxjs/operator/filter';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { NgxDisplayContext } from './models';\nimport { NgxErrorsService } from './ngx-errors.service';\nimport { NgxErrorDefaultLocalTemplate, NgxErrorOverride } from './ngx-error-defaults';\n\n@Component({\n  selector: '[ngxErrors]',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxErrorsComponent implements OnDestroy, AfterContentInit {\n\n  @Input() set renderIf(value: (c: AbstractControl) => boolean) {\n    this.context.renderIf = value;\n  };\n\n  @Input() set order(value: string[]) {\n    this.context.order = value;\n  };\n\n  @Input() set maxError(value: number) {\n    this.context.maxError = value;\n  };\n\n  @Input('ngxErrors') set ngxErrors(value: AbstractControl | string) {\n    if (value !== this._ngxErrors) {\n      this.destroy();\n\n      if (typeof value === 'string') {\n        this._ngxErrors = this.control.control.get(value);\n        if (!this._ngxErrors) {\n          this.addToWaitList(value);\n          return;\n        }\n      }\n\n      if (this._ngxErrors) {\n        const s = this._ngxErrors.statusChanges.subscribe( o => this.update() );\n        this.unsubscribe.push(s);\n        this.update();\n      }\n    }\n  }\n\n  @Input() set exclude(value: string[]) {\n    if (this._exclude !== value) {\n      this._exclude = Array.isArray(value) ? value : [];\n      this.update();\n    }\n  }\n\n  @ContentChild(NgxErrorDefaultLocalTemplate) localTemplate: NgxErrorDefaultLocalTemplate;\n  @ContentChildren(NgxErrorOverride) overrides: QueryList<NgxErrorOverride>;\n\n  private _exclude: string[] = [];\n  private _ngxErrors: AbstractControl;\n  private unsubscribe: Subscription[] = [];\n  private ready: boolean;\n  private context: NgxDisplayContext = {} as any;\n\n  constructor(private ngxErrorsService: NgxErrorsService,\n              private control: ControlContainer,\n              private vcr: ViewContainerRef) { }\n\n  ngAfterContentInit(): void {\n    Object.defineProperty(this, 'ready', { value: true } );\n\n    /*  Create the context.\n        The context is determined by priority based on hierarchy, the order (high -> low):\n         - Local template defined as content (NgxErrorDefaultLocalTemplate)\n         - Default SCOPED template (NgxErrorDefaultTemplate defined within the ControlContainer)\n         - Global Default template\n     */\n    const context = this.ngxErrorsService.getScope(this.control, this.localTemplate);\n\n    // Now copy values from the context to the local context, skipping values that already exists\n    // on the local context.\n    Object.keys(context).forEach( k => {\n      if (!this.context[k]) {\n        this.context[k] = context[k];\n      }\n    });\n\n    if (!this.context.maxError) {\n      this.context.maxError = Number.POSITIVE_INFINITY;\n    }\n\n    const s = this.overrides.changes.subscribe(() => this.update());\n    this.unsubscribe.push(s);\n\n    setTimeout(() => this.update(), 16);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy();\n  }\n\n  private hasControl(value: string): boolean {\n    return !!this.control.control.get(value);\n  }\n\n  private addToWaitList(value: string): void {\n    const unsub = filter.call(this.control.control.valueChanges, () => this.hasControl(value))\n      .subscribe( obj => this.ngxErrors = value ); // ngxErrors setter will unsubscribe all\n    this.unsubscribe.push(unsub);\n  }\n\n  private update(): void {\n    if (this.ready) {\n      this.vcr.clear();\n      if (this._ngxErrors && this._ngxErrors.errors) {\n\n        if (this.context.renderIf && !this.context.renderIf(this._ngxErrors)) {\n          return;\n        }\n\n        /* TODO:\n           `this._ngxErrors.errors` contains errors for the current controller without taking into\n           account errors of child controllers.\n           Using this._ngxErrors.invalid will reflect the full error state.\n           Explore supporting this feature.\n         */\n        const errors = this._ngxErrors.errors;\n        const overrids = this.overrides.toArray();\n\n        const errorKeys = Object.keys(errors).filter(key => this._exclude.indexOf(key) === -1);\n\n        const { order, maxError } = this.context;\n\n        if (Array.isArray(order)) {\n          for (let i = Math.min(order.length, maxError); i >= 0; i--) {\n            const idx = errorKeys.indexOf(order[i]);\n            if (idx > -1) {\n              errorKeys.unshift(...errorKeys.splice(idx, 1));\n            }\n          }\n        }\n\n        if (maxError > 0 && maxError < errorKeys.length) {\n          errorKeys.splice(maxError, errorKeys.length - maxError);\n        }\n\n        errorKeys.forEach(name => {\n            const template = overrids.find( o => o.name === name );\n            const item = {\n              name,\n              message: errors[name] === true\n                ? this.ngxErrorsService.getDefaultMessage(name)\n                : errors[name]\n            };\n\n            this.vcr.createEmbeddedView(\n              template ? template.templateRef : this.context.template,\n              { $implicit: item }\n            );\n          });\n      }\n    }\n  }\n\n  private destroy(): void {\n    while (this.unsubscribe.length > 0) {\n      const s = this.unsubscribe.pop();\n      if (!s.closed) {\n        s.unsubscribe();\n      }\n    }\n\n  }\n}\n"]}