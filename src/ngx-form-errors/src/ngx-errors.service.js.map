{"version":3,"sources":["../../../../src/ngx-form-errors/src/ngx-errors.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAsB,QAAA,EAAU,QAAA,EAAS,MAAO,eAAA,CAAgB;AAKzE;IADA;QAIY,gBAAW,GAA+B,EAAE,CAAC;QAC7C,WAAM,GAAG,IAAI,GAAG,EAAuC,CAAC;IA+BpE,CAAC;yBAnCY,gBAAgB;IAM3B,mCAAQ,GAAR,UAAS,KAAwB,EAAE,GAAuB;QACxD,MAAM,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC;IACvE,CAAC;IAED,oCAAS,GAAT,UAAU,KAAuB,EAAE,OAA0B;QAC3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,uCAAY,GAAZ,UAAa,KAAuB;QAClC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,4CAAiB,GAAjB,UAAkB,IAAY,EAAE,OAAe;QAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;IACnC,CAAC;IAED,4CAAiB,GAAjB,UAAkB,IAAY;QAC5B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAEM,sBAAK,GAAZ,UAAa,IAAsB;QACjC,IAAM,gBAAgB,GAAG,IAAI,kBAAgB,EAAE,CAAC;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC9D,gBAAgB,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YAClD,gBAAgB,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;IAlCU,gBAAgB;QAD5B,UAAU,EAAE;OACA,gBAAgB,CAmC5B;IAAD,uBAAC;;CAnCD,AAmCC,IAAA;SAnCY,gBAAgB;AAqC7B;;GAEG;AAEH;IACE,mCAA2C,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IADvE,yBAAyB;QADrC,UAAU,EAAE;QAEE,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,QAAQ,EAAE,CAAA;yCAA0B,gBAAgB;OADlE,yBAAyB,CAErC;IAAD,gCAAC;CAFD,AAEC,IAAA;SAFY,yBAAyB;AAItC,MAAM,2BAA2B,CAA4B;IAC3D,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC;AACpD,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,IAAM,kCAAkC,GAAe;IAZ5D,yBAAA;IAcA;QACE,OAbG,EAAA,gBAAS;QAcZ,UAbK,EAAA,gBAAuB;QAC9B,IAAA,EAAA,CAAA,yBAAA,CAAA;KAcC;CACF,CAAC","file":"ngx-errors.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\nimport { ControlContainer } from '@angular/forms';\nimport { NgxDisplayContext } from './models';\n\n@Injectable()\nexport class NgxErrorsService {\n  defaultScope: NgxDisplayContext;\n\n  protected defaultMsgs: { [name: string]: string } = {};\n  protected scopes = new Map<ControlContainer, NgxDisplayContext>();\n\n  getScope(scope?: ControlContainer, alt?: NgxDisplayContext): NgxDisplayContext {\n    return (scope && this.scopes.get(scope)) || alt || this.defaultScope;\n  }\n\n  setScoped(scope: ControlContainer, context: NgxDisplayContext): void {\n    this.scopes.set(scope, context);\n  }\n\n  removeScoped(scope: ControlContainer): boolean {\n    return this.scopes.delete(scope);\n  }\n\n  setDefaultMessage(name: string, message: string): void {\n    this.defaultMsgs[name] = message;\n  }\n\n  getDefaultMessage(name: string): string | undefined {\n    return this.defaultMsgs[name];\n  }\n\n  static clone(base: NgxErrorsService): NgxErrorsService {\n    const ngxErrorsService = new NgxErrorsService();\n    if (base) {\n      Object.assign(ngxErrorsService.defaultMsgs, base.defaultMsgs);\n      ngxErrorsService.defaultScope = base.defaultScope;\n      ngxErrorsService.scopes = new Map(base.scopes.entries());\n    }\n    return ngxErrorsService;\n  }\n}\n\n/**\n * @internal\n */\n@Injectable()\nexport class NgxErrorsServiceContainer {\n  constructor(@SkipSelf() @Optional() public ngxErrorsService: NgxErrorsService) { }\n}\n\nexport function containerFactory(c: NgxErrorsServiceContainer) {\n  return NgxErrorsService.clone(c.ngxErrorsService);\n}\n\n/**\n * A Provider array that will instruct the DI to inject a new instance of NgxErrorsService based\n * on the first instance of NgxErrorsService that exist up the DI tree.\n *\n * If instance does not exist will create an instance of NgxErrorsService based on nothing.\n */\nexport const NGX_ERRORS_SERVICE_CHILD_PROVIDERS: Provider[] = [\n  NgxErrorsServiceContainer,\n  {\n    provide: NgxErrorsService,\n    useFactory: containerFactory,\n    deps: [ NgxErrorsServiceContainer ]\n  }\n];\n"]}